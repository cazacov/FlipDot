#include "IntcodeComputer.h"
#include "Command.h"
#include "pgmspace.h"

const int32_t opcodes[] PROGMEM = {1,380,379,385,1008,2399,203850,381,1005,381,12,99,109,2400,1101,0,0,383,1102,1,0,382,20101,0,382,1,21001,383,0,2,21101,37,0,0,1105,1,578,4,382,4,383,204,1,1001,382,1,382,1007,382,44,381,1005,381,22,1001,383,1,383,1007,383,20,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1105,1,161,107,1,392,381,1006,381,161,1102,1,-1,384,1105,1,119,1007,392,42,381,1006,381,161,1102,1,1,384,20101,0,392,1,21101,18,0,2,21102,1,0,3,21101,138,0,0,1105,1,549,1,392,384,392,21001,392,0,1,21101,18,0,2,21102,1,3,3,21102,161,1,0,1105,1,549,1101,0,0,384,20001,388,390,1,21001,389,0,2,21102,1,180,0,1106,0,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,20101,0,389,2,21102,205,1,0,1105,1,393,1002,390,-1,390,1101,0,1,384,21002,388,1,1,20001,389,391,2,21101,0,228,0,1105,1,578,1206,1,261,1208,1,2,381,1006,381,253,21001,388,0,1,20001,389,391,2,21102,1,253,0,1106,0,393,1002,391,-1,391,1101,0,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21102,279,1,0,1105,1,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21102,1,304,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1102,1,1,384,1005,384,161,20101,0,388,1,21002,389,1,2,21101,0,0,3,21101,338,0,0,1106,0,549,1,388,390,388,1,389,391,389,21001,388,0,1,20101,0,389,2,21102,4,1,3,21101,0,365,0,1106,0,549,1007,389,19,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,341,20,15,1,1,22,109,3,22101,0,-2,1,22102,1,-1,2,21101,0,0,3,21102,1,414,0,1105,1,549,22102,1,-2,1,22102,1,-1,2,21102,429,1,0,1106,0,601,1202,1,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2106,0,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,21202,-3,1,-7,109,-8,2105,1,0,109,4,1202,-2,44,566,201,-3,566,566,101,639,566,566,1201,-1,0,0,204,-3,204,-2,204,-1,109,-4,2106,0,0,109,3,1202,-1,44,594,201,-2,594,594,101,639,594,594,20101,0,0,-2,109,-3,2106,0,0,109,3,22102,20,-2,1,22201,1,-1,1,21101,0,443,2,21102,1,526,3,21102,880,1,4,21102,1,630,0,1105,1,456,21201,1,1519,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,0,0,2,2,0,2,0,0,2,2,2,2,0,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,2,0,1,1,0,2,0,0,2,0,2,2,2,0,2,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,0,2,0,0,0,2,2,0,0,2,2,2,2,0,1,1,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,0,0,2,2,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,0,1,1,0,2,0,2,2,2,2,2,0,0,2,0,0,2,0,2,2,2,2,2,2,2,0,2,0,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,0,1,1,0,2,2,2,0,2,0,0,2,2,0,2,2,2,0,2,0,2,2,2,2,2,0,0,0,2,0,0,2,2,2,0,2,2,0,0,0,2,2,2,0,0,1,1,0,2,2,2,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,0,2,2,2,0,2,2,2,2,0,2,0,2,2,0,2,2,2,0,2,0,2,0,1,1,0,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,0,2,0,2,0,2,2,2,2,0,2,2,0,2,0,2,0,2,0,0,1,1,0,2,2,2,2,0,2,2,0,2,2,0,0,0,2,0,2,2,2,2,0,2,0,0,0,2,2,0,2,2,2,2,0,0,2,2,2,2,0,2,2,0,1,1,0,2,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,0,0,2,2,2,2,0,2,2,2,0,2,2,2,2,2,2,0,2,2,0,1,1,0,2,2,2,2,2,0,2,2,2,0,2,2,0,0,2,2,2,0,2,2,2,2,2,2,0,2,0,2,2,0,0,2,2,0,2,2,2,0,2,2,0,1,1,0,2,2,2,2,2,0,2,2,2,0,2,2,2,2,2,0,2,0,2,2,2,0,2,0,0,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,0,1,1,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,0,2,0,0,2,2,0,2,0,2,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,11,38,49,70,10,39,91,58,63,68,52,75,23,63,39,47,35,75,29,29,52,19,47,94,19,66,22,88,37,37,78,74,50,60,79,90,76,65,62,46,70,10,5,78,40,26,89,43,42,11,26,57,77,13,3,28,60,91,71,34,83,69,11,40,97,12,59,2,35,50,62,24,93,66,1,29,31,31,70,97,37,72,39,55,83,60,6,81,2,6,49,73,44,59,88,14,13,76,25,30,85,82,12,12,20,34,11,87,11,95,16,28,84,79,10,96,48,55,62,38,1,7,65,7,63,5,30,52,48,77,31,39,87,20,70,4,91,56,48,20,90,21,89,90,27,37,20,72,89,82,93,84,30,53,85,86,16,7,1,14,2,61,75,25,57,53,89,8,36,29,22,66,21,97,55,19,65,29,55,98,40,48,84,32,87,53,98,98,63,14,29,42,63,90,30,53,58,45,31,2,16,78,84,26,86,59,68,70,42,2,45,90,62,32,62,9,68,14,27,89,97,11,96,60,6,43,29,56,2,80,52,76,92,44,66,62,13,95,7,84,81,47,7,69,33,35,33,65,7,83,15,92,49,18,31,91,40,96,44,64,56,77,31,6,16,68,13,77,32,76,29,23,92,75,32,86,45,94,88,26,79,17,29,70,14,91,9,9,71,79,1,25,72,5,16,62,3,92,8,58,30,9,11,21,7,13,26,11,65,17,83,43,94,78,10,72,96,53,53,61,53,31,73,36,12,66,65,88,81,97,54,82,60,18,81,77,46,31,68,67,55,85,63,42,43,44,71,37,31,94,63,41,61,26,9,16,78,85,54,8,62,86,91,58,42,14,85,25,62,75,55,60,1,94,84,49,67,70,96,16,97,40,5,80,83,58,24,7,42,27,33,97,97,95,94,8,44,18,64,96,80,80,14,16,27,43,26,52,32,41,6,44,83,53,89,11,50,43,64,46,9,97,21,38,59,70,89,18,98,17,69,95,44,70,35,73,22,94,4,78,11,74,15,72,87,84,85,75,34,17,65,11,96,86,39,69,55,59,56,58,97,39,54,70,71,25,15,97,29,66,78,54,54,82,92,28,28,60,98,8,18,5,30,4,3,15,65,4,89,76,27,90,36,47,75,70,82,95,44,13,63,56,36,43,92,66,61,85,73,71,60,51,56,90,44,40,73,15,76,67,51,36,44,12,58,45,17,80,97,30,57,47,96,3,95,2,27,77,84,13,69,89,78,8,45,58,22,74,84,12,10,32,16,20,4,21,98,52,55,77,24,14,38,76,82,73,39,5,19,51,75,89,31,51,60,95,89,2,15,39,17,17,77,79,60,21,21,87,81,1,95,5,5,59,3,93,3,34,51,56,11,39,29,34,56,65,36,20,16,44,28,11,44,15,59,95,30,24,33,24,64,4,6,96,62,72,40,93,30,42,45,81,49,82,77,58,9,18,60,86,53,90,57,69,26,86,67,97,90,79,77,64,19,27,13,10,89,92,33,1,23,97,72,19,11,25,89,87,65,54,93,78,34,49,36,82,61,59,76,9,97,39,32,26,54,62,62,3,33,75,29,87,6,30,92,14,23,33,58,95,92,52,12,95,70,18,64,11,81,76,47,85,40,52,51,65,91,18,30,63,59,63,66,39,76,87,63,98,65,67,17,72,63,9,73,74,12,79,35,48,17,68,40,50,13,46,75,61,53,50,26,37,44,92,46,6,42,17,85,56,85,75,90,63,73,61,74,5,18,70,39,75,67,6,16,10,36,80,28,69,37,42,39,19,40,9,4,49,8,97,82,2,44,86,86,95,49,40,26,86,71,45,11,61,9,98,82,67,88,47,54,86,89,97,6,31,59,9,81,24,76,59,95,19,40,63,9,90,83,10,45,96,80,57,16,8,97,64,36,28,37,88,64,47,19,51,92,30,15,55,2,7,73,22,2,8,82,69,39,63,48,43,27,23,40,82,57,19,42,36,92,57,66,54,8,48,94,76,70,76,203850};

void IntcodeComputer::load_day_13() 
{
    ram.resize(RAM_SIZE, 0);
    ip = 0;
    for (int mem_pos = 0; mem_pos < 2400; mem_pos++) {
        ram[mem_pos]= pgm_read_dword(opcodes + mem_pos);
    }
    i_am_halted = false;
}

bool IntcodeComputer::step(bool trace, std::function<int32_t(void)> const input_required) {

    Command next_command = load_next_command();

    int32_t result = 0;
    std::string cmd;
    bool ret_code = false;

    switch(next_command.opcode) {
        case OPCODE_HALT:
            i_am_halted = true;
            return false;
        case OPCODE_ADD:
            result = next_command.parameter_values[0] + next_command.parameter_values[1];
            cmd = "ADD";
            break;
        case OPCODE_MUL:
            result = next_command.parameter_values[0] * next_command.parameter_values[1];
            cmd = "MUL";
            break;
        case OPCODE_IN:
            result = input_required();
            cmd = "IN";
            break;
        case OPCODE_OUT:
            cmd = "OUT";
            result = next_command.parameter_values[0];
            break;
        case OPCODE_JUMP_IF_TRUE:
            cmd = "JMP True";
            if ( next_command.parameter_values[0] != 0) {
                result = next_command.parameter_values[1];
            }
            else {
                next_command.destination = ResultDestination::NONE;
            }
            break;
        case OPCODE_JUMP_IF_FALSE:
            cmd = "JMP False";
            if ( next_command.parameter_values[0] == 0) {
                result = next_command.parameter_values[1];
            }
            else {
                next_command.destination = ResultDestination::NONE;
            }
            break;
        case OPCODE_LESS_THAN:
            result = (next_command.parameter_values[0] < next_command.parameter_values[1]) ? 1 : 0;
            cmd = "LESS";
            break;
        case OPCODE_EQUALS:
            result = (next_command.parameter_values[0] == next_command.parameter_values[1]) ? 1 : 0;
            cmd = "EQU";
            break;
        case OPCODE_SETBASE:
            result = next_command.parameter_values[0];
            cmd = "BASE";
    }

    if (next_command.destination == ResultDestination::RAM) {
        ram[next_command.result_addr] = result;
    }
    if (next_command.destination == ResultDestination::OUT) {
        last_out = result;
        ret_code = true;
    }
    else if (next_command.destination == ResultDestination::IP) {
        ip = result;
    }
    else if (next_command.destination == ResultDestination::BASE) {
        base += result;
    }
    return ret_code;
}



Command IntcodeComputer::load_next_command() {

    int flags = ram[ip] / 100;

    Command result;

    for (int i = 0; i < 3; i++) {
        result.mode[i] = static_cast<Mode>(flags % 10);
        flags/=10;
    }

    result.opcode = ram[ip] % 100;
    result.destination = ResultDestination::RAM;
    result.param_count = 0;

    int command_length = 0;

    switch (result.opcode) {
        case OPCODE_HALT:
            command_length = 1;
            break;
        case OPCODE_ADD:
            result.param_count = 2;
            command_length = 4;
            break;
        case OPCODE_MUL:
            result.param_count = 2;
            command_length = 4;
            break;
        case OPCODE_IN:
            result.param_count = 0;
            command_length = 2;
            break;
        case OPCODE_OUT:
            result.param_count = 1;
            result.destination = ResultDestination::OUT;
            command_length = 2;
            break;
        case OPCODE_JUMP_IF_TRUE:
            result.param_count = 2;
            result.destination = ResultDestination::IP;
            command_length = 3;
            break;
        case OPCODE_JUMP_IF_FALSE:
            result.param_count = 2;
            result.destination = ResultDestination::IP;
            command_length = 3;
            break;
        case OPCODE_LESS_THAN:
            result.param_count = 2;
            result.destination = ResultDestination::RAM;
            command_length = 4;
            break;
        case OPCODE_EQUALS:
            result.param_count = 2;
            result.destination = ResultDestination::RAM;
            command_length = 4;
            break;
        case OPCODE_SETBASE:
            result.param_count = 1;
            result.destination = ResultDestination::BASE;
            command_length = 2;
            break;
    }

    for (int i = 0; i < result.param_count; i++) {
        int32_t &ram_value = ram[ip + 1 + i];
        if (result.mode[i] == Mode::Position) {
            result.parameter_values[i] = ram[ram_value];
        } else if (result.mode[i] == Mode::Relative) {
            result.parameter_values[i] = ram[ram_value + base];
        }
        else {
            result.parameter_values[i] = ram_value;
        }
    }
    if (result.destination == ResultDestination::RAM) {
        if (result.mode[result.param_count] == Mode::Position) {
            result.result_addr = ram[ip + command_length -1];
        } else {
            result.result_addr = ram[ip + command_length -1] + base;
        }
    }

    ip+= command_length;
    return result;
}

void IntcodeComputer::reset() {
    ip = 0;
    base = 0;
    i_am_halted = false;
}
